/// main.dart
// Mellowa ðŸ’œ - FINAL version (calls removed).
// Features included:
// - Auth (Google, anonymous), user doc creation
// - Posts feed (Firestore) with Ad-per-day enforcement (30 ads/day/user) and Ad placeholders
// - Search page
// - Camera page (picker, simple filter preview, upload to Firestore & Storage)
// - Chats page (real-time Firestore chats) + Moments ðŸŒ¸ integrated into Chats screen
// - Profile page (moments summary, premium toggle mock, biometric app lock, invite code)
// - In-app-purchase skeleton (no server-side receipt validation â€” implement for production)
// - Null-safety and transaction-safe Firestore updates
//
// Required pubspec dependencies (add these):
// firebase_core, firebase_auth, cloud_firestore, firebase_storage, google_sign_in,
// google_mobile_ads, local_auth, image_picker, in_app_purchase, uuid, intl
//
// BEFORE RUNNING:
// - Configure Firebase (FlutterFire CLI -> firebase_options.dart) or call Firebase.initializeApp() with options
// - Replace Ad unit ids with real AdMob ids when ready
// - Configure IAP product IDs in Play/App Store and update kProductIds
// - Platform-specific setup: AndroidManifest (AdMob, Internet), iOS plist (AdMob keys)
// - For production: implement server-side IAP receipt validation and security measures.

import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
// If you generated firebase_options.dart with FlutterFire CLI, import it and use it in initializeApp.
// import 'firebase_options.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:local_auth/local_auth.dart';
import 'package:image_picker/image_picker.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:uuid/uuid.dart';
import 'package:intl/intl.dart';

Future<void> main() async {
Â  WidgetsFlutterBinding.ensureInitialized();
Â  await Firebase.initializeApp();
Â  // If using firebase_options.dart:
Â  // await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

Â  MobileAds.instance.initialize();
Â  runApp(MellowaApp());
}

class MellowaApp extends StatelessWidget {
Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  return MaterialApp(
Â Â Â Â Â  title: 'Mellowa ðŸ’œ',
Â Â Â Â Â  debugShowCheckedModeBanner: false,
Â Â Â Â Â  theme: ThemeData(primarySwatch: Colors.purple),
Â Â Â Â Â  home: AuthGate(),
Â Â Â  );
Â  }
}

/// ---------------- AUTH GATE ----------------
class AuthGate extends StatefulWidget {
Â  @override
Â  _AuthGateState createState() => _AuthGateState();
}

class _AuthGateState extends State<AuthGate> {
Â  User? _user;
Â  StreamSubscription<User?>? _sub;
Â  final GoogleSignIn _google = GoogleSignIn();

Â  final TextEditingController _emailC = TextEditingController();
Â  final TextEditingController _passC = TextEditingController();

Â  @override
Â  void initState() {
Â Â Â  super.initState();
Â Â Â  _user = FirebaseAuth.instance.currentUser;
Â Â Â  _sub = FirebaseAuth.instance.authStateChanges().listen((u) {
Â Â Â Â Â  setState(() => _user = u);
Â Â Â Â Â  if (u != null) _ensureUserDoc(u);
Â Â Â  });
Â  }

Â  Future<void> _ensureUserDoc(User u) async {
Â Â Â  final usersRef = FirebaseFirestore.instance.collection('users');
Â Â Â  final doc = usersRef.doc(u.uid);
Â Â Â  final snap = await doc.get();
Â Â Â  if (!snap.exists) {
Â Â Â Â Â  await doc.set({
Â Â Â Â Â Â Â  'displayName': u.displayName ?? 'Anonymous',
Â Â Â Â Â Â Â  'email': u.email ?? '',
Â Â Â Â Â Â Â  'photoURL': u.photoURL ?? '',
Â Â Â Â Â Â Â  'createdAt': FieldValue.serverTimestamp(),
Â Â Â Â Â Â Â  'premium': false,
Â Â Â Â Â Â Â  'adsShownDate': '', // yyyy-MM-dd
Â Â Â Â Â Â Â  'adsShownCount': 0,
Â Â Â Â Â Â Â  'moments': {'currentStreak': 0, 'lastMomentDate': ''},
Â Â Â Â Â Â Â  'inviteCode': Uuid().v4().substring(0, 8),
Â Â Â Â Â  }, SetOptions(merge: true));
Â Â Â  }
Â  }

Â  Future<void> _signInGoogle() async {
Â Â Â  try {
Â Â Â Â Â  final account = await _google.signIn();
Â Â Â Â Â  if (account == null) return;
Â Â Â Â Â  final auth = await account.authentication;
Â Â Â Â Â  final cred = GoogleAuthProvider.credential(idToken: auth.idToken, accessToken: auth.accessToken);
Â Â Â Â Â  final res = await FirebaseAuth.instance.signInWithCredential(cred);
Â Â Â Â Â  if (res.user != null) await _ensureUserDoc(res.user!);
Â Â Â  } catch (e) {
Â Â Â Â Â  debugPrint('Google sign error: $e');
Â Â Â Â Â  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Google sign-in failed')));
Â Â Â  }
Â  }

Â  Future<void> _signInAnon() async {
Â Â Â  try {
Â Â Â Â Â  final res = await FirebaseAuth.instance.signInAnonymously();
Â Â Â Â Â  if (res.user != null) await _ensureUserDoc(res.user!);
Â Â Â  } catch (e) {
Â Â Â Â Â  debugPrint('Anon sign error: $e');
Â Â Â Â Â  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Anonymous sign-in failed')));
Â Â Â  }
Â  }

Â  Future<void> _signInWithEmail() async {
Â Â Â  final email = _emailC.text.trim();
Â Â Â  final pass = _passC.text;
Â Â Â  if (email.isEmpty || pass.isEmpty) {
Â Â Â Â Â  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Enter email & password')));
Â Â Â Â Â  return;
Â Â Â  }
Â Â Â  try {
Â Â Â Â Â  final cred = await FirebaseAuth.instance.signInWithEmailAndPassword(email: email, password: pass);
Â Â Â Â Â  if (cred.user != null) await _ensureUserDoc(cred.user!);
Â Â Â  } catch (e) {
Â Â Â Â Â  // Try create
Â Â Â Â Â  try {
Â Â Â Â Â Â Â  final cred = await FirebaseAuth.instance.createUserWithEmailAndPassword(email: email, password: pass);
Â Â Â Â Â Â Â  if (cred.user != null) await _ensureUserDoc(cred.user!);
Â Â Â Â Â  } catch (e2) {
Â Â Â Â Â Â Â  debugPrint('Email auth error: $e2');
Â Â Â Â Â Â Â  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Email auth failed')));
Â Â Â Â Â  }
Â Â Â  }
Â  }

Â  @override
Â  void dispose() {
Â Â Â  _sub?.cancel();
Â Â Â  _emailC.dispose();
Â Â Â  _passC.dispose();
Â Â Â  super.dispose();
Â  }

Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  if (_user == null) {
Â Â Â Â Â  return Scaffold(
Â Â Â Â Â Â Â  body: SafeArea(
Â Â Â Â Â Â Â Â Â  child: SingleChildScrollView(
Â Â Â Â Â Â Â Â Â Â Â  padding: EdgeInsets.all(20),
Â Â Â Â Â Â Â Â Â Â Â  child: Column(mainAxisSize: MainAxisSize.min, children: [
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 20),
Â Â Â Â Â Â Â Â Â Â Â Â Â  Text('Mellowa ðŸ’œ', style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold)),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 18),
Â Â Â Â Â Â Â Â Â Â Â Â Â  TextField(controller: _emailC, decoration: InputDecoration(labelText: 'Email')),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 8),
Â Â Â Â Â Â Â Â Â Â Â Â Â  TextField(controller: _passC, decoration: InputDecoration(labelText: 'Password'), obscureText: true),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 12),
Â Â Â Â Â Â Â Â Â Â Â Â Â  ElevatedButton(onPressed: _signInWithEmail, child: Text('Sign in / Create')),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 10),
Â Â Â Â Â Â Â Â Â Â Â Â Â  ElevatedButton.icon(icon: Icon(Icons.login), label: Text('Continue with Google'), onPressed: _signInGoogle),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 10),
Â Â Â Â Â Â Â Â Â Â Â Â Â  TextButton(onPressed: _signInAnon, child: Text('Continue anonymously')),
Â Â Â Â Â Â Â Â Â Â Â  ]),
Â Â Â Â Â Â Â Â Â  ),
Â Â Â Â Â Â Â  ),
Â Â Â Â Â  );
Â Â Â  }
Â Â Â  return HomeScreen();
Â  }
}

/// ---------------- HOME (5 tabs but calls removed) ----------------
class HomeScreen extends StatefulWidget {
Â  @override
Â  _HomeScreenState createState() => _HomeScreenState();
}
class _HomeScreenState extends State<HomeScreen> {
Â  int _index = 0;
Â  final _pages = [PostsPage(), SearchPage(), CameraPage(), ChatsAndMomentsPage(), ProfilePage()];

Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  return Scaffold(
Â Â Â Â Â  body: IndexedStack(index: _index, children: _pages),
Â Â Â Â Â  bottomNavigationBar: BottomNavigationBar(
Â Â Â Â Â Â Â  currentIndex: _index,
Â Â Â Â Â Â Â  type: BottomNavigationBarType.fixed,
Â Â Â Â Â Â Â  onTap: (i) => setState(() => _index = i),
Â Â Â Â Â Â Â  items: const [
Â Â Â Â Â Â Â Â Â  BottomNavigationBarItem(icon: Icon(Icons.home_outlined), label: 'Posts'),
Â Â Â Â Â Â Â Â Â  BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
Â Â Â Â Â Â Â Â Â  BottomNavigationBarItem(icon: Icon(Icons.camera_alt), label: 'Camera'),
Â Â Â Â Â Â Â Â Â  BottomNavigationBarItem(icon: Icon(Icons.chat_bubble_outline), label: 'Chats'),
Â Â Â Â Â Â Â Â Â  BottomNavigationBarItem(icon: Icon(Icons.person_outline), label: 'Profile'),
Â Â Â Â Â Â Â  ],
Â Â Â Â Â  ),
Â Â Â Â Â  floatingActionButton: FloatingActionButton(
Â Â Â Â Â Â Â  onPressed: () => setState(() => _index = 2),
Â Â Â Â Â Â Â  backgroundColor: Colors.purple,
Â Â Â Â Â Â Â  child: Icon(Icons.add),
Â Â Â Â Â  ),
Â Â Â  );
Â  }
}

/// ---------------- POSTS PAGE (ads enforcement) ----------------
class PostsPage extends StatefulWidget {
Â  @override
Â  _PostsPageState createState() => _PostsPageState();
}
class _PostsPageState extends State<PostsPage> {
Â  final postsRef = FirebaseFirestore.instance.collection('posts');
Â  final usersRef = FirebaseFirestore.instance.collection('users');
Â  final todayKey = () => DateFormat('yyyy-MM-dd').format(DateTime.now());
Â  List<QueryDocumentSnapshot> _docs = [];
Â  StreamSubscription<QuerySnapshot>? _sub;

Â  @override
Â  void initState() {
Â Â Â  super.initState();
Â Â Â  _sub = postsRef.orderBy('createdAt', descending: true).snapshots().listen((snap) {
Â Â Â Â Â  setState(() => _docs = snap.docs);
Â Â Â  }, onError: (e) => debugPrint('posts stream error: $e'));
Â  }

Â  @override
Â  void dispose() {
Â Â Â  _sub?.cancel();
Â Â Â  super.dispose();
Â  }

Â  Future<bool> _canShowAdAndIncrement() async {
Â Â Â  final uid = FirebaseAuth.instance.currentUser?.uid;
Â Â Â  if (uid == null) return false;
Â Â Â  final docRef = usersRef.doc(uid);
Â Â Â  return FirebaseFirestore.instance.runTransaction<bool>((tx) async {
Â Â Â Â Â  final snap = await tx.get(docRef);
Â Â Â Â Â  final data = snap.data() ?? {};
Â Â Â Â Â  final premium = (data['premium'] as bool?) ?? false;
Â Â Â Â Â  if (premium) return false;
Â Â Â Â Â  final String shownDate = (data['adsShownDate'] as String?) ?? '';
Â Â Â Â Â  int shownCount = (data['adsShownCount'] as int?) ?? 0;
Â Â Â Â Â  final String today = todayKey();
Â Â Â Â Â  if (shownDate != today) shownCount = 0;
Â Â Â Â Â  if (shownCount >= 30) return false;
Â Â Â Â Â  tx.set(docRef, {'adsShownDate': today, 'adsShownCount': shownCount + 1}, SetOptions(merge: true));
Â Â Â Â Â  return true;
Â Â Â  }).catchError((e) {
Â Â Â Â Â  debugPrint('ad tx error: $e');
Â Â Â Â Â  return false;
Â Â Â  });
Â  }

Â  Widget _adPlaceholder() {
Â Â Â  return FutureBuilder<bool>(
Â Â Â Â Â  future: _canShowAdAndIncrement(),
Â Â Â Â Â  builder: (c, snap) {
Â Â Â Â Â Â Â  if (!snap.hasData) return SizedBox();
Â Â Â Â Â Â Â  if (!snap.data!) return SizedBox();
Â Â Â Â Â Â Â  // Replace this Card with a real AdMob widget (Banner/Native) when integrating.
Â Â Â Â Â Â Â  return Card(
Â Â Â Â Â Â Â Â Â  margin: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
Â Â Â Â Â Â Â Â Â  color: Colors.purple.shade50,
Â Â Â Â Â Â Â Â Â  child: Padding(
Â Â Â Â Â Â Â Â Â Â Â  padding: EdgeInsets.all(12),
Â Â Â Â Â Â Â Â Â Â Â  child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
Â Â Â Â Â Â Â Â Â Â Â Â Â  Text('Sponsored', style: TextStyle(fontWeight: FontWeight.bold)),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 8),
Â Â Â Â Â Â Â Â Â Â Â Â Â  Text('This is a placeholder ad. Replace with AdMob Banner / Native ad.'),
Â Â Â Â Â Â Â Â Â Â Â Â Â  SizedBox(height: 8),
Â Â Â Â Â Â Â Â Â Â Â Â Â  ElevatedButton(onPressed: () => ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Ad clicked'))), child: Text('Learn more')),
Â Â Â Â Â Â Â Â Â Â Â  ]),
Â Â Â Â Â Â Â Â Â  ),
Â Â Â Â Â Â Â  );
Â Â Â Â Â  },
Â Â Â  );
Â  }

Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  if (_docs.isEmpty) return Scaffold(appBar: AppBar(title: Text('Posts')), body: Center(child: Text('No posts yet')));
Â Â Â  final List<Widget> items = [];
Â Â Â  for (int i = 0; i < _docs.length; i++) {
Â Â Â Â Â  final d = _docs[i].data() as Map<String, dynamic>? ?? {};
Â Â Â Â Â  final author = d['authorName'] as String? ?? 'Unknown';
Â Â Â Â Â  final text = d['text'] as String? ?? '';
Â Â Â Â Â  final imageUrl = d['imageUrl'] as String? ?? '';
Â Â Â Â Â  final likesCount = (d['likes'] as List<dynamic>?)?.length ?? 0;
Â Â Â Â Â  items.add(Card(
Â Â Â Â Â Â Â  margin: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
Â Â Â Â Â Â Â  child: Padding(
Â Â Â Â Â Â Â Â Â  padding: EdgeInsets.all(12),
Â Â Â Â Â Â Â Â Â  child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
Â Â Â Â Â Â Â Â Â Â Â  Text(author, style: TextStyle(fontWeight: FontWeight.bold)),
Â Â Â Â Â Â Â Â Â Â Â  if (text.isNotEmpty) ...[SizedBox(height: 8), Text(text)],
Â Â Â Â Â Â Â Â Â Â Â  if (imageUrl.isNotEmpty) ...[SizedBox(height: 8), Image.network(imageUrl, errorBuilder: (_, __, ___) => SizedBox())],
Â Â Â Â Â Â Â Â Â Â Â  Row(mainAxisAlignment: MainAxisAlignment.end, children: [
Â Â Â Â Â Â Â Â Â Â Â Â Â  IconButton(icon: Icon(Icons.favorite_border), onPressed: () => _toggleLike(_docs[i])),
Â Â Â Â Â Â Â Â Â Â Â Â Â  Text('$likesCount'),
Â Â Â Â Â Â Â Â Â Â Â  ])
Â Â Â Â Â Â Â Â Â  ]),
Â Â Â Â Â Â Â  ),
Â Â Â Â Â  ));
Â Â Â Â Â  if ((i + 1) % 4 == 0) items.add(_adPlaceholder());
Â Â Â  }
Â Â Â  return Scaffold(appBar: AppBar(title: Text('Posts')), body: ListView(children: items));
Â  }

Â  Future<void> _toggleLike(QueryDocumentSnapshot docSnap) async {
Â Â Â  final uid = FirebaseAuth.instance.currentUser?.uid;
Â Â Â  if (uid == null) return;
Â Â Â  final docRef = docSnap.reference;
Â Â Â  FirebaseFirestore.instance.runTransaction((tx) async {
Â Â Â Â Â  final snap = await tx.get(docRef);
Â Â Â Â Â  final data = snap.data() as Map<String, dynamic>? ?? {};
Â Â Â Â Â  final likes = List<String>.from(data['likes'] ?? []);
Â Â Â Â Â  if (likes.contains(uid)) likes.remove(uid); else likes.add(uid);
Â Â Â Â Â  tx.update(docRef, {'likes': likes});
Â Â Â  }).catchError((e) => debugPrint('like tx error: $e'));
Â  }
}

/// ---------------- SEARCH PAGE ----------------
class SearchPage extends StatefulWidget {
Â  @override
Â  _SearchPageState createState() => _SearchPageState();
}
class _SearchPageState extends State<SearchPage> {
Â  String _q = '';
Â  final postsRef = FirebaseFirestore.instance.collection('posts');

Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  return Scaffold(
Â Â Â Â Â  appBar: AppBar(title: Text('Search')),
Â Â Â Â Â  body: Column(children: [
Â Â Â Â Â Â Â  Padding(
Â Â Â Â Â Â Â Â Â  padding: EdgeInsets.all(12),
Â Â Â Â Â Â Â Â Â  child: TextField(decoration: InputDecoration(prefixIcon: Icon(Icons.search), hintText: 'Search users, posts, hashtags...'), onChanged: (v) => setState(() => _q = v.trim())),
Â Â Â Â Â Â Â  ),
Â Â Â Â Â Â Â  Expanded(
Â Â Â Â Â Â Â Â Â  child: _q.isEmpty
Â Â Â Â Â Â Â Â Â Â Â Â Â  ? Center(child: Text('Type to search'))
Â Â Â Â Â Â Â Â Â Â Â Â Â  : FutureBuilder<QuerySnapshot>(
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  future: postsRef.where('keywords', arrayContains: _q.toLowerCase()).get(),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  builder: (c, snap) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  if (snap.hasError) return Center(child: Text('Search error'));
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  if (!snap.hasData) return Center(child: CircularProgressIndicator());
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  final docs = snap.data!.docs;
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  if (docs.isEmpty) return Center(child: Text('No results'));
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  return ListView.builder(
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  itemCount: docs.length,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  itemBuilder: (i, _) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  final d = docs[i].data() as Map<String, dynamic>? ?? {};
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  return ListTile(title: Text(d['authorName'] as String? ?? 'Unknown'), subtitle: Text((d['text'] as String? ?? '').length > 80 ? (d['text'] as String).substring(0, 80) + '...' : (d['text'] as String? ?? '')));
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  );
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  ),
Â Â Â Â Â Â Â  ),
Â Â Â Â Â  ]),
Â Â Â  );
Â  }
}

/// ---------------- CAMERA PAGE ----------------
class CameraPage extends StatefulWidget {
Â  @override
Â  _CameraPageState createState() => _CameraPageState();
}
class _CameraPageState extends State<CameraPage> {
Â  final ImagePicker _picker = ImagePicker();
Â  XFile? _picked;
Â  double _filterStrength = 0.5;
Â  bool _isUploading = false;
Â  final postsRef = FirebaseFirestore.instance.collection('posts');

Â  Future<void> _pickCamera() async {
Â Â Â  try {
Â Â Â Â Â  final f = await _picker.pickImage(source: ImageSource.camera, imageQuality: 85);
Â Â Â Â Â  if (f == null) return;
Â Â Â Â Â  setState(() => _picked = f);
Â Â Â  } catch (e) {
Â Â Â Â Â  debugPrint('pick camera error: $e');
Â Â Â  }
Â  }

Â  Future<void> _pickGallery() async {
Â Â Â  try {
Â Â Â Â Â  final f = await _picker.pickImage(source: ImageSource.gallery, imageQuality: 85);
Â Â Â Â Â  if (f == null) return;
Â Â Â Â Â  setState(() => _picked = f);
Â Â Â  } catch (e) {
Â Â Â Â Â  debugPrint('pick gallery error: $e');
Â Â Â  }
Â  }

Â  Widget _preview() {
Â Â Â  if (_picked == null) return Container(height: 320, color: Colors.grey[200], child: Center(child: Text('No image selected')));
Â Â Â  final img = Image.file(File(_picked!.path), fit: BoxFit.cover);
Â Â Â  final s = _filterStrength;
Â Â Â  final matrix = <double>[
Â Â Â Â Â  1 + s * 0.2, 0, 0, 0, 0,
Â Â Â Â Â  0, 1 + s * 0.05, 0, 0, 0,
Â Â Â Â Â  0, 0, 1 - s * 0.1, 0, 0,
Â Â Â Â Â  0, 0, 0, 1, 0,
Â Â Â  ];
Â Â Â  return SizedBox(height: 320, child: ColorFiltered(colorFilter: ColorFilter.matrix(matrix), child: img));
Â  }

Â  Future<void> _upload(String caption) async {
Â Â Â  if (_picked == null) return;
Â Â Â  final user = FirebaseAuth.instance.currentUser;
Â Â Â  if (user == null) return;
Â Â Â  setState(() => _isUploading = true);
Â Â Â  try {
Â Â Â Â Â  final ref = FirebaseStorage.instance.ref().child('posts/${DateTime.now().millisecondsSinceEpoch}_${user.uid}.jpg');
Â Â Â Â Â  final uploadTask = await ref.putFile(File(_picked!.path));
Â Â Â Â Â  final url = await uploadTask.ref.getDownloadURL();
Â Â Â Â Â  await postsRef.add({
Â Â Â Â Â Â Â  'authorId': user.uid,
Â Â Â Â Â Â Â  'authorName': user.displayName ?? 'Anonymous',
Â Â Â Â Â Â Â  'imageUrl': url,
Â Â Â Â Â Â Â  'text': caption,
Â Â Â Â Â Â Â  'createdAt': FieldValue.serverTimestamp(),
Â Â Â Â Â Â Â  'likes': [],
Â Â Â Â Â Â Â  'keywords': _generateKeywords(caption),
Â Â Â Â Â Â Â  'filterStrength': _filterStrength,
Â Â Â Â Â  });
Â Â Â Â Â  setState(() => _picked = null);
Â Â Â Â Â  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Uploaded')));
Â Â Â  } catch (e) {
Â Â Â Â Â  debugPrint('upload error: $e');
Â Â Â Â Â  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Upload failed')));
Â Â Â  } finally {
Â Â Â Â Â  setState(() => _isUploading = false);
Â Â Â  }
Â  }

Â  List<String> _generateKeywords(String text) {
Â Â Â  final t = text.toLowerCase().trim();
Â Â Â  if (t.isEmpty) return [];
Â Â Â  final words = t.split(RegExp(r'\s+')).where((w) => w.length > 2).toSet().toList();
Â Â Â  return words;
Â  }

Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  return Scaffold(
Â Â Â Â Â  appBar: AppBar(title: Text('Camera')),
Â Â Â Â Â  body: Padding(
Â Â Â Â Â Â Â  padding: EdgeInsets.all(12),
Â Â Â Â Â Â Â  child: Column(children: [
Â Â Â Â Â Â Â Â Â  _preview(),
Â Â Â Â Â Â Â Â Â  Slider(value: _filterStrength, onChanged: (v) => setState(() => _filterStrength = v)),
Â Â Â Â Â Â Â Â Â  Row(mainAxisAlignment: MainAxisAlignment.center, children: [
Â Â Â Â Â Â Â Â Â Â Â  ElevatedButton.icon(icon: Icon(Icons.camera), label: Text('Camera'), onPressed: _pickCamera),
Â Â Â Â Â Â Â Â Â Â Â  SizedBox(width: 8),
Â Â Â Â Â Â Â Â Â Â Â  ElevatedButton.icon(icon: Icon(Icons.photo), label: Text('Gallery'), onPressed: _pickGallery),
Â Â Â Â Â Â Â Â Â Â Â  SizedBox(width: 8),
Â Â Â Â Â Â Â Â Â Â Â  ElevatedButton.icon(icon: Icon(Icons.upload), label: _isUploading ? Text('Uploading...') : Text('Upload'), onPressed: _isUploading ? null : () => _upload('')),
Â Â Â Â Â Â Â Â Â  ]),
Â Â Â Â Â Â Â Â Â  SizedBox(height: 8),
Â Â Â Â Â Â Â Â Â  Text('Note: face-tracking & premium 3D filters are TODO â€” integrate native SDKs later', style: TextStyle(fontSize: 12, color: Colors.grey)),
Â Â Â Â Â Â Â  ]),
Â Â Â Â Â  ),
Â Â Â  );
Â  }
}

/// ---------------- CHATS + MOMENTS PAGE ----------------
/// This page combines chat list + moments UI as requested (Calls removed).
class ChatsAndMomentsPage extends StatefulWidget {
Â  @override
Â  _ChatsAndMomentsPageState createState() => _ChatsAndMomentsPageState();
}
class _ChatsAndMomentsPageState extends State<ChatsAndMomentsPage> {
Â  int _tabIndex = 0; // 0 = Chats, 1 = Moments
Â  @override
Â  Widget build(BuildContext context) {
Â Â Â  return Scaffold(
Â Â Â Â Â  appBar: AppBar(
Â Â Â Â Â Â Â  title: Text('Chats & Moments'),
Â Â Â Â Â Â Â  bottom: PreferredSize(preferredSize: Size.fromHeight(44), child: Row(children: [
Â Â Â Â Â Â Â Â Â  Expanded(child: TextButton(onPressed: () => setState(() => _tabIndex = 0), child: Text('Chats', style: TextStyle(color: _tabIndex == 0 ? Colors.white : Colors.white70)))),
Â Â Â Â Â Â Â Â Â  Expanded(child: TextButton(onPressed: () => setState(() => _tabIndex = 1), child: Text('Moments', style: TextStyle(color: _tabIndex == 1 ? Colors.white : Colors.white70)))),
Â Â Â Â Â Â Â  ])),
Â Â Â Â 
